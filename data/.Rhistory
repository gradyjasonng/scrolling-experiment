ggsave("plots/group-density.png", width = 7, height = 7, units ="in", bg = 'transparent')
?ggsave
p3 <-  grid.arrange(p1,p2, nrow=1)
ggsave("plots/group-density.png", plot = p3, width = 7, height = 7, units ="in", bg = 'transparent')
ggsave("plots/group-density.png", plot = p3, width = 8, height = 5, units ="in", bg = 'transparent')
#raw RT by groups
ggplot(df, aes(metaphor, RT, fill = metaphor)) +  geom_boxplot(width = 0.4) +
facet_grid(cols = vars(texture)) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ metaphor*texture, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
coord_cartesian(ylim = ylim1) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers not shown")),
aes(label = RT, y = 145), nudge_x = 0, size=3) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-groups.png", width = 8, height = 6, units ="in", bg = 'transparent')
#raw RT by groups
ggplot(df, aes(metaphor, RT, fill = metaphor)) +  geom_boxplot(width = 0.4) +
facet_grid(cols = vars(texture)) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ metaphor*texture, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
coord_cartesian(ylim = ylim1) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 145), nudge_x = 0, size=3) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-groups.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT summary
ggplot(df, aes(metaphor, log(RT), fill = metaphor)) +  geom_boxplot(width= 0.3) +
facet_grid(cols = vars(texture))
ggsave("plots/rawRT-groups.png", width = 8, height = 6, units ="in", bg = 'transparent')
ggplot(df, aes(metaphor, log(RT), fill= texture)) + geom_boxplot()
#logged RT by order
ggplot(df, aes(order, log(RT), fill = order)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
ggplot(df, aes(RT, group = order, fill = texture)) +
facet_wrap(vars(texture), nrow = 3) +
geom_density(alpha = 0.2) +
coord_cartesian(xlim = c(0,200))
#logged RT by question - lots of variance here
ggplot(df, aes(question, log(RT), fill = texture)) +
facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
ggplot(df, aes(RT, group = question, fill = texture)) +
facet_wrap(vars(texture), nrow = 3) +
geom_density(alpha = 0.2) +
coord_cartesian(xlim = c(0,200))
#logged RT by question - lots of variance here
ggplot(df, aes(question, log(RT), fill = texture)) +
facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
#raw RT by groups
ggplot(df, aes(metaphor, RT, fill = metaphor)) +  geom_boxplot(width = 0.4) +
facet_grid(cols = vars(texture)) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ metaphor*texture, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
coord_cartesian(ylim = ylim1) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 145), nudge_x = 0, size=3) +
geom_text(data = aggregate(RT~ metaphor*texture, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-groups.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT summary
ggplot(df, aes(metaphor, log(RT), fill = metaphor)) +  geom_boxplot(width= 0.3) +
facet_grid(cols = vars(texture))
ggsave("plots/rawRT-metaphor.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT by trial
ggplot(df, aes(as.character(trial), log(RT), fill =trial)) + geom_boxplot( alpha = 0.5, width = 0.3) +
facet_grid(cols = vars(metaphor)) +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="line") +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="point")
#logged RT by question - lots of variance here
ggplot(df, aes(question, log(RT), fill = texture)) +
facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
ggsave("plots/loggedRT-question.png", width = 8, height = 6, units ="in", bg = 'transparent')
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black") +
geom_smooth(method='lm', color = 1, size = 0.2)
ggsave("plots/loggeddRT-charBeforeTarget.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT by order
ggplot(df, aes(order, log(RT), fill = order)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
ggsave("plots/loggedRT-trial.png", width = 8, height = 6, units ="in", bg = 'transparent')
ggsave("plots/loggedRT-order.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT by trial
ggplot(df, aes(as.character(trial), log(RT), fill =trial)) + geom_boxplot( alpha = 0.5, width = 0.3) +
facet_grid(cols = vars(metaphor)) +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="line") +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="point")
ggsave("plots/loggedRT-trial.png", width = 8, height = 6, units ="in", bg = 'transparent')
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
stat_summary(fun.y=mean, geom="line", size=3, color="black", fill="black", alpha = 0.2) +
geom_smooth(method='lm', color = 1, size = 0.2)
df %>% group_by(texture) %>% summarize(mean = mean(charsBeforeTarget))
#each texture seems to have quite different means of target word distance
meanCBT <- df %>% group_by(texture) %>% summarize(mean = mean(charsBeforeTarget))
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(xintercept = meanCBT$mean) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(xintercept = meanCBT$mean, color = texture) +
geom_smooth(method='lm', color = 1, size = 0.2)
?geom_vline
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(aes(charsBeforeTarget, log(RT), color = texture), color = texture) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(df, aes(charsBeforeTarget, log(RT), color = texture), color = texture) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(xintercept = meanCBT$mean) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.2) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.8) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=1, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=3, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=4, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=5, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape="-", size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape="---", size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=11, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=12, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=13, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=6, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=4, size=3, color="black", fill="black", alpha = 0.4) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
ggplot(df, aes(charsBeforeTarget, log(RT), color = texture)) + geom_jitter(width=5, alpha = 0.4) +
stat_summary(fun.y=mean, geom="point", shape=4, size=3, color="black", fill="black", alpha = 0.7) +
geom_vline(xintercept = meanCBT$mean, color = c("red", "green", "blue")) +
geom_smooth(method='lm', color = 1, size = 0.2)
meanCBT
ggsave("plots/loggedRT-charBeforeTarget.png", width = 8, height = 6, units ="in", bg = 'transparent')
#logged RT by question - lots of variance here
ggplot(df, aes(question, log(RT), fill = texture)) +
facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
#facet_wrap(vars(texture), scales = "free_x") +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F)
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F) +
label(x = "Questions (In ascending order of target distance)")
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F) +
labs(x = "Questions (In ascending order of target distance)")
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F) +
labs(x = "Questions (Ordered by increasing target distance)")
ggsave("plots/loggedRT-question-ordered.png", width = 8, height = 6, units ="in", bg = 'transparent')
#each texture seems to have quite different means of target word distance
meanCBT <- df %>% group_by(texture) %>% summarize(mean = mean(charsBeforeTarget))
meanCBT
#logged RT by question - ordered by target char distance
ggplot(df, aes(reorder(question, charsBeforeTarget), log(RT), fill = texture)) +
geom_boxplot(size = 0.5, width = 0.3, show.legend = F) +
labs(x = "Questions (Ordered by increasing target distance)") +
geom_smooth(method='lm', color = 1, size = 0.2)
#RT density distrbutions across groups
p1 <- ggplot(df, aes(RT)) + geom_density() + coord_cartesian(xlim = c(0,300))
p2 <- ggplot(df, aes(RT)) + geom_density() + facet_wrap(texture ~ metaphor, ncol = 2) + coord_cartesian(xlim = c(0,300))
plot(normFit)
ggplot(df, aes(RT)) +  geom_density() +
geom_line(aes(x=df$RT, y=dnorm(df$RT, normFit$estimate["mean"], norm$estimate["sd"])), color="green", size = 0.8, alpha = 0.6) +
geom_line(aes(x=df$RT, y=dlnorm(df$RT, lnormFit$estimate["meanlog"], lnormFit$estimate["sdlog"])), color="red", size = 0.8, alpha = 0.6) +
geom_line(aes(x=df$RT, y=dgamma(df$RT,gammaFit$estimate["shape"], gammaFit$estimate["rate"])), color="blue", size = 0.8, alpha = 0.6) +
coord_cartesian(ylim = c(0,0.03), xlim = c(0,200))
ggplot(df, aes(RT)) +  geom_density() +
geom_line(aes(x=df$RT, y=dnorm(df$RT, normFit$estimate["mean"], norm$estimate["sd"])), color="green", size = 0.8, alpha = 0.6) +
#geom_line(aes(x=df$RT, y=dlnorm(df$RT, lnormFit$estimate["meanlog"], lnormFit$estimate["sdlog"])), color="red", size = 0.8, alpha = 0.6) +
geom_line(aes(x=df$RT, y=dgamma(df$RT,gammaFit$estimate["shape"], gammaFit$estimate["rate"])), color="blue", size = 0.8, alpha = 0.6) +
coord_cartesian(ylim = c(0,0.03), xlim = c(0,200))
ggsave("plots/distr-comparison.png", plot = p3, width = 5, height = 5, units ="in", bg = 'transparent')
ggsave("plots/distr-comparison.png", width = 5, height = 5, units ="in", bg = 'transparent')
leveneTest(RT ~ metaphor, data = df) # p = 0.5046
leveneTest(RT ~ metaphor*texture, data = df) # p = 0.5046
leveneTest(RT ~ texture, data = df) # p = 0.5046
leveneTest(RT ~ metaphor, data = df) # p = 0.5046
leveneTest(RT ~ metaphor*texture, data = df) # p = 0.5046
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
#tests
m <- m2
#fitted against residuals
plot(fitted(m), residuals(m), xlab = "Fitted Values", ylab = "Residuals", col = "grey")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(m), residuals(m)))
summary(m)
Anova(m)
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
)
contrast(emmeans(m,"metaphor"))
#model using bobyqa optimizer
m2 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
View(df)
df <- df %>% mutate(charsBeforeTargetscaled = scale(charsBeforeTarget))
#model fitting
m1 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode), data = df,
family = Gamma(link = "identity"))
#model using bobyqa optimizer
m2 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests
m <- m2
#fitted against residuals
plot(fitted(m), residuals(m), xlab = "Fitted Values", ylab = "Residuals", col = "grey")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(m), residuals(m)))
summary(m)
Anova(m)
summary(m)
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
Anova(m)
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
contrast(emmeans(m,"charsBeforeTargetScaled"))
m
contrast(emmeans(m,"charsBeforeTargetscaled"))
plot(emmeans(m,"charsBeforeTargetscaled"))
plot(m)
?sjPlot
plot_mode(m, type = "fe")
plot_model(m, type = "fe")
plot_model(m, type = "eff")
?plot_model
plot_model(m, type = "slope")
plot_model(m, type = "eff")
m
m$predict
m$predicted
plot_model(m, type = "eff")
View(analysis_set)
View(df)
typeof(trial)
typeof(df$trial)
df <- df %>% mutate(charsBeforeTargetscaled = scale(charsBeforeTarget), trialScaled = scale(trial))
#model using bobyqa optimizer, and with time FE
m2 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + trialScaled + (texture|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
m2
#tests
m <- m2
summary(m)
#model using bobyqa optimizer, and with time FE
m2 <- glmer(RT ~  texture*metaphor*trialScaled + charsBeforeTargetscaled + (texture|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests
m <- m2
summary(m)
Anova(m)
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
contrast(emmeans(m,"metaphor"))
summary(m)
Anova(m)
#model using bobyqa optimizer, and with time FE
m2 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode) + (trialScaled|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
m2
#tests
m <- m2
summary(m)
Anova(m)
plot_model(m, type = "eff")
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
contrast(emmeans(m,"metaphor"))
#model using bobyqa optimizer, and with time FE
m2 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture+trialScaled|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests
m <- m2
#fitted against residuals
plot(fitted(m), residuals(m), xlab = "Fitted Values", ylab = "Residuals", col = "grey")
abline(h = 0, lty = 2)
lines(smooth.spline(fitted(m), residuals(m)))
summary(m)
Anova(m)
plot_model(m, type = "eff")
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
m3 <- update(m2,.~texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode))
anova(m2,m3)
#model fitting
m0 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode) + (trialScaled|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests of random effects significance
m1 <- update(m0,.~texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode))
m2 <- update(m0,.~texture*metaphor + charsBeforeTargetscaled + (trialScaled|mTurkCode))
anova(m0,m1,m2)
anova(m2,m1,m0)
#tests
m <- m0
summary(m)
Anova(m)
plot_model(m, type = "eff")
sjp.glmer(m, type = "re.qq")
sjPlot::sjp.glmer(m, type = "re.qq")
?sjPlot
plot_model(m, type = "re.qq")
plot_model(m, type = "resid")
plot_model(m, type = "re")
install.packages("glmmTMB")
plot_model(m, type = "slope")
plot_model(m, type = "re")
?plot_model
plot_model(m, type = "emm")
m
plot_model(m, type = "re")
plot_model(m, type = "pred")
attributes(df$charsBeforeTargetScaled)
attributes(df$charsBeforeTargetscaled)
attributes(df$charsBeforeTargetscaled)
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
contrast(emmeans(m,"metaphor"))
contrast(emmeans(m,"texture"))
contrast(emmeans(m,"metaphor"))
?emmeans
summary(m)
fitted(m)
cor(df$RT, fitted(m))
cor(df$RT, fitted(m))^2
ggplot2(aes(residuals(m))) + geom_density()
ggplot(aes(residuals(m))) + geom_density()
m$residuals
ggplot(m) + geom_density(aes(.fitted))
ggplot(m) + geom_density(aes(.residuals))
ggplot(m) + geom_density(aes(.residual))
ggplot(m) + geom_density(aes(.fitted))
ggplot(m) + geom_density(aes(resid))
ggplot(m) + geom_density(aes(.resid))
ggplot(m) + geom_histogram(aes(.resid))
ggplot(m) + geom_histogram(aes(.resid), bins = 50)
ggplot(m) + geom_histogram(aes(.resid), bins = 20)
ggplot(m) + geom_histogram(aes(.resid), bins = 30)
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
plot(m)
plot(m.fitted)
m.fitted
m$fitted
m
summary(m)
Anova(m)
#raw RT by metaphor
ggplot(df, aes(metaphor, RT, fill= metaphor)) + geom_boxplot(width = 0.4) +
coord_cartesian(ylim = ylim1) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ metaphor, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
geom_text(data = aggregate(RT~ metaphor, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 140), nudge_x = 0.25) +
geom_text(data = aggregate(RT~ metaphor, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-metaphor.png", width = 6, height = 7, units ="in", bg = 'transparent')
Anova(m)
#logged RT by trial
ggplot(df, aes(as.character(trial), log(RT), fill =trial)) + geom_boxplot( alpha = 0.5, width = 0.3) +
facet_grid(cols = vars(metaphor)) +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="line") +
stat_summary(aes(y = log(RT),group=1), fun.y=median, colour="red", geom="point")
#raw RT by texture
ggplot(df, aes(texture, RT, fill= texture)) + geom_boxplot(width = 0.4) +
coord_cartesian(ylim = ylim1) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ metaphor, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
geom_text(data = aggregate(RT~ metaphor, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 140), nudge_x = 0.25) +
geom_text(data = aggregate(RT~ metaphor, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
#raw RT by texture
ggplot(df, aes(texture, RT, fill= texture)) + geom_boxplot(width = 0.4) +
coord_cartesian(ylim = ylim1) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ texture, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
geom_text(data = aggregate(RT~ texture, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 140), nudge_x = 0.25) +
geom_text(data = aggregate(RT~ texture, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-texture", width = 6, height = 7, units ="in", bg = 'transparent')
ggsave("plots/rawRT-texture", width = 6, height = 7, units ="in", bg = 'transparent')
#raw RT by texture
ggplot(df, aes(texture, RT, fill= texture)) + geom_boxplot(width = 0.4) +
coord_cartesian(ylim = ylim1) +
stat_summary(fun.y=mean, geom="point", shape=1, size=1, color="black", fill="black") +
geom_text(data = aggregate(RT ~ texture, df, median) %>% mutate(RT = round(RT,1)), aes(label = RT, y = RT), nudge_y = 3) +
geom_text(data = aggregate(RT~ texture, df, function(x) paste(sum(!between(x, ylim1[1], ylim1[2])), "outliers\nnot shown")),
aes(label = RT, y = 140), nudge_x = 0.25) +
geom_text(data = aggregate(RT~ texture, df, function(x) paste("n =", length(x))), aes(label = RT, y = 0))
ggsave("plots/rawRT-texture", width = 6, height = 7, units ="in", bg = 'transparent')
ggsave("plots/rawRT-texture.png", width = 6, height = 7, units ="in", bg = 'transparent')
contrast(emmeans(m,"texture"))
Anova(m)
contrast(emmeans(m,"texture"))
contrast(emmeans(m,"metaphor"))
summary(m)
Anova(m)
contrast(emmeans(m,"metaphor"))
contrast(emmeans(m,"metaphor"))
contrast(emmeans(m,"metaphor", weights = "proportional"))
contrast(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
plot(emmeans(m, c("metaphor", "texture")), comparisons = TRUE, by = "texture")
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
?pairs
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
car::adaptiveKernel()
contrast(emmeans(m,"metaphor"), interaction = "pairwaise")
contrast(emmeans(m,"metaphor"), interaction = "pairwise")
contrast(emmeans(m,"metaphor"), interaction = "pairwise", adjust = "none")
?contrast
contrast(emmeans(m,"metaphor"), interaction = "pairwise", by ="textuer")
contrast(emmeans(m,"metaphor"), interaction = "pairwise", by ="texture")
contrast(emmeans(m,"metaphor"), interaction = "pairwise")
pairs(emmeans(m,"metaphor"))
pairs(emmeans(m,"metaphor"))
pairs(emmeans(m, c("metaphor", "texture")), by = "texture")
pairs(emmeans(m, c("metaphor", "texture")), by = "texture", adjust="none")
?emmeans
pairs(emmeans(m, "metaphor", by="texture"))
?contrast
pairs(emmeans(m, "metaphor", by="texture"), options = list(type ="response", adjust = "None"))
pairs(emmeans(m, "metaphor", by="texture"))
contrast(emmeans(m,"texture"))
contrast(emmeans(m,"texture"), by = "metaphor")
contrast(emmeans(m,"metaphor"))
contrast(emmeans(m,"metaphor"), adjust="none")
contrast(emmeans(m,c("metaphor",'texture')), adjust="none")
contrast(emmeans(m,c("metaphor",'texture')), adjust="none", by = "texture")
contrast(emmeans(m,c("metaphor",'texture')), adjust="bonferroni", by = "texture")
contrast(emmeans(m,c("metaphor",'texture')), by = "texture")
#model fitting
m0 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + trialScaled + (texture|mTurkCode) , data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests
m <- m0
summary(m)
Anova(m)
#model fitting
m0 <- glmer(RT ~  texture*metaphor + charsBeforeTargetscaled + (texture|mTurkCode) + (trialScaled|mTurkCode), data = df,
family = Gamma(link = "identity"),
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#tests
m <- m0
summary(m)
Anova(m)
contrast(emmeans(m,c("metaphor",'texture')), by = "texture")
pairs(emmeans(m,c("metaphor",'texture')), by = "texture")
